
i2c_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002aac  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001364  08002c74  08002c74  00012c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fd8  08003fd8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08003fd8  08003fd8  00013fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fe0  08003fe0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fe0  08003fe0  00013fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fe4  08003fe4  00013fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000014  08003ffc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08003ffc  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096d8  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017b4  00000000  00000000  0002971c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000808  00000000  00000000  0002aed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000728  00000000  00000000  0002b6d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002485c  00000000  00000000  0002be00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007aac  00000000  00000000  0005065c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e0f37  00000000  00000000  00058108  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013903f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fac  00000000  00000000  001390bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000014 	.word	0x20000014
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08002c5c 	.word	0x08002c5c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000018 	.word	0x20000018
 8000204:	08002c5c 	.word	0x08002c5c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fc34 	bl	8000d7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f845 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f8fd 	bl	8000714 <MX_GPIO_Init>
  MX_I2C1_Init();
 800051a:	f000 f8bb 	bl	8000694 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 800051e:	f000 f951 	bl	80007c4 <ssd1306_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for(int i = 0; i < app ; i++){
 8000522:	2300      	movs	r3, #0
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	e016      	b.n	8000556 <main+0x4e>

	  ssd1306_SetCursor(i, 5);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	b2db      	uxtb	r3, r3
 800052c:	2105      	movs	r1, #5
 800052e:	4618      	mov	r0, r3
 8000530:	f000 fb08 	bl	8000b44 <ssd1306_SetCursor>
	  ssd1306_WriteString("D U B B", Font_16x26, White);
 8000534:	4a18      	ldr	r2, [pc, #96]	; (8000598 <main+0x90>)
 8000536:	2301      	movs	r3, #1
 8000538:	ca06      	ldmia	r2, {r1, r2}
 800053a:	4818      	ldr	r0, [pc, #96]	; (800059c <main+0x94>)
 800053c:	f000 fadc 	bl	8000af8 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8000540:	f000 f9cc 	bl	80008dc <ssd1306_UpdateScreen>
	  HAL_Delay(1);
 8000544:	2001      	movs	r0, #1
 8000546:	f000 fc75 	bl	8000e34 <HAL_Delay>
	  ssd1306_Fill(Black);
 800054a:	2000      	movs	r0, #0
 800054c:	f000 f9a4 	bl	8000898 <ssd1306_Fill>
	  for(int i = 0; i < app ; i++){
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	3301      	adds	r3, #1
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2b0e      	cmp	r3, #14
 800055a:	dde5      	ble.n	8000528 <main+0x20>
	  }
	  for(int i = app; i > 0 ; i--){
 800055c:	230f      	movs	r3, #15
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	e016      	b.n	8000590 <main+0x88>

	 	  ssd1306_SetCursor(i, 5);
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2105      	movs	r1, #5
 8000568:	4618      	mov	r0, r3
 800056a:	f000 faeb 	bl	8000b44 <ssd1306_SetCursor>
	 	  ssd1306_WriteString("D U B B", Font_16x26, White);
 800056e:	4a0a      	ldr	r2, [pc, #40]	; (8000598 <main+0x90>)
 8000570:	2301      	movs	r3, #1
 8000572:	ca06      	ldmia	r2, {r1, r2}
 8000574:	4809      	ldr	r0, [pc, #36]	; (800059c <main+0x94>)
 8000576:	f000 fabf 	bl	8000af8 <ssd1306_WriteString>
	 	  ssd1306_UpdateScreen();
 800057a:	f000 f9af 	bl	80008dc <ssd1306_UpdateScreen>
	 	  HAL_Delay(1);
 800057e:	2001      	movs	r0, #1
 8000580:	f000 fc58 	bl	8000e34 <HAL_Delay>
	 	  ssd1306_Fill(Black);
 8000584:	2000      	movs	r0, #0
 8000586:	f000 f987 	bl	8000898 <ssd1306_Fill>
	  for(int i = app; i > 0 ; i--){
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	3b01      	subs	r3, #1
 800058e:	603b      	str	r3, [r7, #0]
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	dce5      	bgt.n	8000562 <main+0x5a>
	  for(int i = 0; i < app ; i++){
 8000596:	e7c4      	b.n	8000522 <main+0x1a>
 8000598:	20000000 	.word	0x20000000
 800059c:	08002c74 	.word	0x08002c74

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b0b4      	sub	sp, #208	; 0xd0
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80005aa:	2230      	movs	r2, #48	; 0x30
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 fb4c 	bl	8002c4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	2284      	movs	r2, #132	; 0x84
 80005ca:	2100      	movs	r1, #0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f002 fb3d 	bl	8002c4c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d2:	4b2e      	ldr	r3, [pc, #184]	; (800068c <SystemClock_Config+0xec>)
 80005d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d6:	4a2d      	ldr	r2, [pc, #180]	; (800068c <SystemClock_Config+0xec>)
 80005d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005dc:	6413      	str	r3, [r2, #64]	; 0x40
 80005de:	4b2b      	ldr	r3, [pc, #172]	; (800068c <SystemClock_Config+0xec>)
 80005e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005ea:	4b29      	ldr	r3, [pc, #164]	; (8000690 <SystemClock_Config+0xf0>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005f2:	4a27      	ldr	r2, [pc, #156]	; (8000690 <SystemClock_Config+0xf0>)
 80005f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f8:	6013      	str	r3, [r2, #0]
 80005fa:	4b25      	ldr	r3, [pc, #148]	; (8000690 <SystemClock_Config+0xf0>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000606:	2302      	movs	r3, #2
 8000608:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000612:	2310      	movs	r3, #16
 8000614:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000618:	2300      	movs	r3, #0
 800061a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000622:	4618      	mov	r0, r3
 8000624:	f001 fabc 	bl	8001ba0 <HAL_RCC_OscConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800062e:	f000 f889 	bl	8000744 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000632:	230f      	movs	r3, #15
 8000634:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000638:	2300      	movs	r3, #0
 800063a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000650:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f001 fd46 	bl	80020e8 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000662:	f000 f86f 	bl	8000744 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000666:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800066a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800066c:	2300      	movs	r3, #0
 800066e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	4618      	mov	r0, r3
 8000676:	f001 fed5 	bl	8002424 <HAL_RCCEx_PeriphCLKConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000680:	f000 f860 	bl	8000744 <Error_Handler>
  }
}
 8000684:	bf00      	nop
 8000686:	37d0      	adds	r7, #208	; 0xd0
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <MX_I2C1_Init+0x74>)
 800069a:	4a1c      	ldr	r2, [pc, #112]	; (800070c <MX_I2C1_Init+0x78>)
 800069c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800069e:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <MX_I2C1_Init+0x74>)
 80006a0:	4a1b      	ldr	r2, [pc, #108]	; (8000710 <MX_I2C1_Init+0x7c>)
 80006a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006a4:	4b18      	ldr	r3, [pc, #96]	; (8000708 <MX_I2C1_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006aa:	4b17      	ldr	r3, [pc, #92]	; (8000708 <MX_I2C1_Init+0x74>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <MX_I2C1_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006b6:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_I2C1_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <MX_I2C1_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_I2C1_Init+0x74>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_I2C1_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ce:	480e      	ldr	r0, [pc, #56]	; (8000708 <MX_I2C1_Init+0x74>)
 80006d0:	f000 fe62 	bl	8001398 <HAL_I2C_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006da:	f000 f833 	bl	8000744 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006de:	2100      	movs	r1, #0
 80006e0:	4809      	ldr	r0, [pc, #36]	; (8000708 <MX_I2C1_Init+0x74>)
 80006e2:	f001 f9c5 	bl	8001a70 <HAL_I2CEx_ConfigAnalogFilter>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006ec:	f000 f82a 	bl	8000744 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006f0:	2100      	movs	r1, #0
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_I2C1_Init+0x74>)
 80006f4:	f001 fa07 	bl	8001b06 <HAL_I2CEx_ConfigDigitalFilter>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006fe:	f000 f821 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000238 	.word	0x20000238
 800070c:	40005400 	.word	0x40005400
 8000710:	00303d5b 	.word	0x00303d5b

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_GPIO_Init+0x2c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a08      	ldr	r2, [pc, #32]	; (8000740 <MX_GPIO_Init+0x2c>)
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_GPIO_Init+0x2c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800

08000744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af04      	add	r7, sp, #16
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800076a:	f04f 33ff 	mov.w	r3, #4294967295
 800076e:	9302      	str	r3, [sp, #8]
 8000770:	2301      	movs	r3, #1
 8000772:	9301      	str	r3, [sp, #4]
 8000774:	1dfb      	adds	r3, r7, #7
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	2301      	movs	r3, #1
 800077a:	2200      	movs	r2, #0
 800077c:	2178      	movs	r1, #120	; 0x78
 800077e:	4803      	ldr	r0, [pc, #12]	; (800078c <ssd1306_WriteCommand+0x2c>)
 8000780:	f000 fe9a 	bl	80014b8 <HAL_I2C_Mem_Write>
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000238 	.word	0x20000238

08000790 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af04      	add	r7, sp, #16
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	b29b      	uxth	r3, r3
 800079e:	f04f 32ff 	mov.w	r2, #4294967295
 80007a2:	9202      	str	r2, [sp, #8]
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2301      	movs	r3, #1
 80007ac:	2240      	movs	r2, #64	; 0x40
 80007ae:	2178      	movs	r1, #120	; 0x78
 80007b0:	4803      	ldr	r0, [pc, #12]	; (80007c0 <ssd1306_WriteData+0x30>)
 80007b2:	f000 fe81 	bl	80014b8 <HAL_I2C_Mem_Write>
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000238 	.word	0x20000238

080007c4 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80007c8:	f7ff ffc3 	bl	8000752 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80007cc:	2064      	movs	r0, #100	; 0x64
 80007ce:	f000 fb31 	bl	8000e34 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80007d2:	2000      	movs	r0, #0
 80007d4:	f000 f9e2 	bl	8000b9c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80007d8:	2020      	movs	r0, #32
 80007da:	f7ff ffc1 	bl	8000760 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80007de:	2000      	movs	r0, #0
 80007e0:	f7ff ffbe 	bl	8000760 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80007e4:	20b0      	movs	r0, #176	; 0xb0
 80007e6:	f7ff ffbb 	bl	8000760 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80007ea:	20c8      	movs	r0, #200	; 0xc8
 80007ec:	f7ff ffb8 	bl	8000760 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80007f0:	2000      	movs	r0, #0
 80007f2:	f7ff ffb5 	bl	8000760 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80007f6:	2010      	movs	r0, #16
 80007f8:	f7ff ffb2 	bl	8000760 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80007fc:	2040      	movs	r0, #64	; 0x40
 80007fe:	f7ff ffaf 	bl	8000760 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000802:	20ff      	movs	r0, #255	; 0xff
 8000804:	f000 f9b6 	bl	8000b74 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000808:	20a1      	movs	r0, #161	; 0xa1
 800080a:	f7ff ffa9 	bl	8000760 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800080e:	20a6      	movs	r0, #166	; 0xa6
 8000810:	f7ff ffa6 	bl	8000760 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000814:	20a8      	movs	r0, #168	; 0xa8
 8000816:	f7ff ffa3 	bl	8000760 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 800081a:	201f      	movs	r0, #31
 800081c:	f7ff ffa0 	bl	8000760 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000820:	20a4      	movs	r0, #164	; 0xa4
 8000822:	f7ff ff9d 	bl	8000760 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000826:	20d3      	movs	r0, #211	; 0xd3
 8000828:	f7ff ff9a 	bl	8000760 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800082c:	2000      	movs	r0, #0
 800082e:	f7ff ff97 	bl	8000760 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000832:	20d5      	movs	r0, #213	; 0xd5
 8000834:	f7ff ff94 	bl	8000760 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000838:	20f0      	movs	r0, #240	; 0xf0
 800083a:	f7ff ff91 	bl	8000760 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800083e:	20d9      	movs	r0, #217	; 0xd9
 8000840:	f7ff ff8e 	bl	8000760 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000844:	2022      	movs	r0, #34	; 0x22
 8000846:	f7ff ff8b 	bl	8000760 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800084a:	20da      	movs	r0, #218	; 0xda
 800084c:	f7ff ff88 	bl	8000760 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8000850:	2002      	movs	r0, #2
 8000852:	f7ff ff85 	bl	8000760 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000856:	20db      	movs	r0, #219	; 0xdb
 8000858:	f7ff ff82 	bl	8000760 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800085c:	2020      	movs	r0, #32
 800085e:	f7ff ff7f 	bl	8000760 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000862:	208d      	movs	r0, #141	; 0x8d
 8000864:	f7ff ff7c 	bl	8000760 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000868:	2014      	movs	r0, #20
 800086a:	f7ff ff79 	bl	8000760 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800086e:	2001      	movs	r0, #1
 8000870:	f000 f994 	bl	8000b9c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000874:	2000      	movs	r0, #0
 8000876:	f000 f80f 	bl	8000898 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800087a:	f000 f82f 	bl	80008dc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800087e:	4b05      	ldr	r3, [pc, #20]	; (8000894 <ssd1306_Init+0xd0>)
 8000880:	2200      	movs	r2, #0
 8000882:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000884:	4b03      	ldr	r3, [pc, #12]	; (8000894 <ssd1306_Init+0xd0>)
 8000886:	2200      	movs	r2, #0
 8000888:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800088a:	4b02      	ldr	r3, [pc, #8]	; (8000894 <ssd1306_Init+0xd0>)
 800088c:	2201      	movs	r2, #1
 800088e:	715a      	strb	r2, [r3, #5]
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000230 	.word	0x20000230

08000898 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	e00d      	b.n	80008c4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d101      	bne.n	80008b2 <ssd1306_Fill+0x1a>
 80008ae:	2100      	movs	r1, #0
 80008b0:	e000      	b.n	80008b4 <ssd1306_Fill+0x1c>
 80008b2:	21ff      	movs	r1, #255	; 0xff
 80008b4:	4a08      	ldr	r2, [pc, #32]	; (80008d8 <ssd1306_Fill+0x40>)
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	4413      	add	r3, r2
 80008ba:	460a      	mov	r2, r1
 80008bc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	3301      	adds	r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008ca:	d3ed      	bcc.n	80008a8 <ssd1306_Fill+0x10>
    }
}
 80008cc:	bf00      	nop
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	20000030 	.word	0x20000030

080008dc <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80008e2:	2300      	movs	r3, #0
 80008e4:	71fb      	strb	r3, [r7, #7]
 80008e6:	e016      	b.n	8000916 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	3b50      	subs	r3, #80	; 0x50
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ff36 	bl	8000760 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80008f4:	2000      	movs	r0, #0
 80008f6:	f7ff ff33 	bl	8000760 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80008fa:	2010      	movs	r0, #16
 80008fc:	f7ff ff30 	bl	8000760 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	01db      	lsls	r3, r3, #7
 8000904:	4a07      	ldr	r2, [pc, #28]	; (8000924 <ssd1306_UpdateScreen+0x48>)
 8000906:	4413      	add	r3, r2
 8000908:	2180      	movs	r1, #128	; 0x80
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff ff40 	bl	8000790 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	3301      	adds	r3, #1
 8000914:	71fb      	strb	r3, [r7, #7]
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	2b03      	cmp	r3, #3
 800091a:	d9e5      	bls.n	80008e8 <ssd1306_UpdateScreen+0xc>
    }
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000030 	.word	0x20000030

08000928 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
 8000932:	460b      	mov	r3, r1
 8000934:	71bb      	strb	r3, [r7, #6]
 8000936:	4613      	mov	r3, r2
 8000938:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800093a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093e:	2b00      	cmp	r3, #0
 8000940:	db48      	blt.n	80009d4 <ssd1306_DrawPixel+0xac>
 8000942:	79bb      	ldrb	r3, [r7, #6]
 8000944:	2b1f      	cmp	r3, #31
 8000946:	d845      	bhi.n	80009d4 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8000948:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <ssd1306_DrawPixel+0xb8>)
 800094a:	791b      	ldrb	r3, [r3, #4]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d006      	beq.n	800095e <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8000950:	797b      	ldrb	r3, [r7, #5]
 8000952:	2b00      	cmp	r3, #0
 8000954:	bf0c      	ite	eq
 8000956:	2301      	moveq	r3, #1
 8000958:	2300      	movne	r3, #0
 800095a:	b2db      	uxtb	r3, r3
 800095c:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 800095e:	797b      	ldrb	r3, [r7, #5]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d11a      	bne.n	800099a <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000964:	79fa      	ldrb	r2, [r7, #7]
 8000966:	79bb      	ldrb	r3, [r7, #6]
 8000968:	08db      	lsrs	r3, r3, #3
 800096a:	b2d8      	uxtb	r0, r3
 800096c:	4603      	mov	r3, r0
 800096e:	01db      	lsls	r3, r3, #7
 8000970:	4413      	add	r3, r2
 8000972:	4a1c      	ldr	r2, [pc, #112]	; (80009e4 <ssd1306_DrawPixel+0xbc>)
 8000974:	5cd3      	ldrb	r3, [r2, r3]
 8000976:	b25a      	sxtb	r2, r3
 8000978:	79bb      	ldrb	r3, [r7, #6]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	2101      	movs	r1, #1
 8000980:	fa01 f303 	lsl.w	r3, r1, r3
 8000984:	b25b      	sxtb	r3, r3
 8000986:	4313      	orrs	r3, r2
 8000988:	b259      	sxtb	r1, r3
 800098a:	79fa      	ldrb	r2, [r7, #7]
 800098c:	4603      	mov	r3, r0
 800098e:	01db      	lsls	r3, r3, #7
 8000990:	4413      	add	r3, r2
 8000992:	b2c9      	uxtb	r1, r1
 8000994:	4a13      	ldr	r2, [pc, #76]	; (80009e4 <ssd1306_DrawPixel+0xbc>)
 8000996:	54d1      	strb	r1, [r2, r3]
 8000998:	e01d      	b.n	80009d6 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800099a:	79fa      	ldrb	r2, [r7, #7]
 800099c:	79bb      	ldrb	r3, [r7, #6]
 800099e:	08db      	lsrs	r3, r3, #3
 80009a0:	b2d8      	uxtb	r0, r3
 80009a2:	4603      	mov	r3, r0
 80009a4:	01db      	lsls	r3, r3, #7
 80009a6:	4413      	add	r3, r2
 80009a8:	4a0e      	ldr	r2, [pc, #56]	; (80009e4 <ssd1306_DrawPixel+0xbc>)
 80009aa:	5cd3      	ldrb	r3, [r2, r3]
 80009ac:	b25a      	sxtb	r2, r3
 80009ae:	79bb      	ldrb	r3, [r7, #6]
 80009b0:	f003 0307 	and.w	r3, r3, #7
 80009b4:	2101      	movs	r1, #1
 80009b6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ba:	b25b      	sxtb	r3, r3
 80009bc:	43db      	mvns	r3, r3
 80009be:	b25b      	sxtb	r3, r3
 80009c0:	4013      	ands	r3, r2
 80009c2:	b259      	sxtb	r1, r3
 80009c4:	79fa      	ldrb	r2, [r7, #7]
 80009c6:	4603      	mov	r3, r0
 80009c8:	01db      	lsls	r3, r3, #7
 80009ca:	4413      	add	r3, r2
 80009cc:	b2c9      	uxtb	r1, r1
 80009ce:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <ssd1306_DrawPixel+0xbc>)
 80009d0:	54d1      	strb	r1, [r2, r3]
 80009d2:	e000      	b.n	80009d6 <ssd1306_DrawPixel+0xae>
        return;
 80009d4:	bf00      	nop
    }
}
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	20000230 	.word	0x20000230
 80009e4:	20000030 	.word	0x20000030

080009e8 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b089      	sub	sp, #36	; 0x24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4604      	mov	r4, r0
 80009f0:	1d38      	adds	r0, r7, #4
 80009f2:	e880 0006 	stmia.w	r0, {r1, r2}
 80009f6:	461a      	mov	r2, r3
 80009f8:	4623      	mov	r3, r4
 80009fa:	73fb      	strb	r3, [r7, #15]
 80009fc:	4613      	mov	r3, r2
 80009fe:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000a00:	7bfb      	ldrb	r3, [r7, #15]
 8000a02:	2b1f      	cmp	r3, #31
 8000a04:	d902      	bls.n	8000a0c <ssd1306_WriteChar+0x24>
 8000a06:	7bfb      	ldrb	r3, [r7, #15]
 8000a08:	2b7e      	cmp	r3, #126	; 0x7e
 8000a0a:	d901      	bls.n	8000a10 <ssd1306_WriteChar+0x28>
        return 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e06d      	b.n	8000aec <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000a10:	4b38      	ldr	r3, [pc, #224]	; (8000af4 <ssd1306_WriteChar+0x10c>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	793b      	ldrb	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	2b80      	cmp	r3, #128	; 0x80
 8000a1c:	dc06      	bgt.n	8000a2c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000a1e:	4b35      	ldr	r3, [pc, #212]	; (8000af4 <ssd1306_WriteChar+0x10c>)
 8000a20:	885b      	ldrh	r3, [r3, #2]
 8000a22:	461a      	mov	r2, r3
 8000a24:	797b      	ldrb	r3, [r7, #5]
 8000a26:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000a28:	2b20      	cmp	r3, #32
 8000a2a:	dd01      	ble.n	8000a30 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	e05d      	b.n	8000aec <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
 8000a34:	e04c      	b.n	8000ad0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000a36:	68ba      	ldr	r2, [r7, #8]
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	3b20      	subs	r3, #32
 8000a3c:	7979      	ldrb	r1, [r7, #5]
 8000a3e:	fb01 f303 	mul.w	r3, r1, r3
 8000a42:	4619      	mov	r1, r3
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	440b      	add	r3, r1
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	4413      	add	r3, r2
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000a50:	2300      	movs	r3, #0
 8000a52:	61bb      	str	r3, [r7, #24]
 8000a54:	e034      	b.n	8000ac0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000a56:	697a      	ldr	r2, [r7, #20]
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d012      	beq.n	8000a8c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000a66:	4b23      	ldr	r3, [pc, #140]	; (8000af4 <ssd1306_WriteChar+0x10c>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	4413      	add	r3, r2
 8000a72:	b2d8      	uxtb	r0, r3
 8000a74:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <ssd1306_WriteChar+0x10c>)
 8000a76:	885b      	ldrh	r3, [r3, #2]
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	4413      	add	r3, r2
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	7bba      	ldrb	r2, [r7, #14]
 8000a84:	4619      	mov	r1, r3
 8000a86:	f7ff ff4f 	bl	8000928 <ssd1306_DrawPixel>
 8000a8a:	e016      	b.n	8000aba <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000a8c:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <ssd1306_WriteChar+0x10c>)
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	4413      	add	r3, r2
 8000a98:	b2d8      	uxtb	r0, r3
 8000a9a:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <ssd1306_WriteChar+0x10c>)
 8000a9c:	885b      	ldrh	r3, [r3, #2]
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	4413      	add	r3, r2
 8000aa6:	b2d9      	uxtb	r1, r3
 8000aa8:	7bbb      	ldrb	r3, [r7, #14]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	bf0c      	ite	eq
 8000aae:	2301      	moveq	r3, #1
 8000ab0:	2300      	movne	r3, #0
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	f7ff ff37 	bl	8000928 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	3301      	adds	r3, #1
 8000abe:	61bb      	str	r3, [r7, #24]
 8000ac0:	793b      	ldrb	r3, [r7, #4]
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d3c5      	bcc.n	8000a56 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3301      	adds	r3, #1
 8000ace:	61fb      	str	r3, [r7, #28]
 8000ad0:	797b      	ldrb	r3, [r7, #5]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d3ad      	bcc.n	8000a36 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <ssd1306_WriteChar+0x10c>)
 8000adc:	881a      	ldrh	r2, [r3, #0]
 8000ade:	793b      	ldrb	r3, [r7, #4]
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	4413      	add	r3, r2
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <ssd1306_WriteChar+0x10c>)
 8000ae8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3724      	adds	r7, #36	; 0x24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd90      	pop	{r4, r7, pc}
 8000af4:	20000230 	.word	0x20000230

08000af8 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	1d38      	adds	r0, r7, #4
 8000b02:	e880 0006 	stmia.w	r0, {r1, r2}
 8000b06:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8000b08:	e012      	b.n	8000b30 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	7818      	ldrb	r0, [r3, #0]
 8000b0e:	78fb      	ldrb	r3, [r7, #3]
 8000b10:	1d3a      	adds	r2, r7, #4
 8000b12:	ca06      	ldmia	r2, {r1, r2}
 8000b14:	f7ff ff68 	bl	80009e8 <ssd1306_WriteChar>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d002      	beq.n	8000b2a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	e008      	b.n	8000b3c <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d1e8      	bne.n	8000b0a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	460a      	mov	r2, r1
 8000b4e:	71fb      	strb	r3, [r7, #7]
 8000b50:	4613      	mov	r3, r2
 8000b52:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <ssd1306_SetCursor+0x2c>)
 8000b5a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000b5c:	79bb      	ldrb	r3, [r7, #6]
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <ssd1306_SetCursor+0x2c>)
 8000b62:	805a      	strh	r2, [r3, #2]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	20000230 	.word	0x20000230

08000b74 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000b7e:	2381      	movs	r3, #129	; 0x81
 8000b80:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000b82:	7bfb      	ldrb	r3, [r7, #15]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fdeb 	bl	8000760 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fde7 	bl	8000760 <ssd1306_WriteCommand>
}
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d005      	beq.n	8000bb8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000bac:	23af      	movs	r3, #175	; 0xaf
 8000bae:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <ssd1306_SetDisplayOn+0x38>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	719a      	strb	r2, [r3, #6]
 8000bb6:	e004      	b.n	8000bc2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000bb8:	23ae      	movs	r3, #174	; 0xae
 8000bba:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <ssd1306_SetDisplayOn+0x38>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fdcb 	bl	8000760 <ssd1306_WriteCommand>
}
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000230 	.word	0x20000230

08000bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <HAL_MspInit+0x44>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <HAL_MspInit+0x44>)
 8000be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <HAL_MspInit+0x44>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <HAL_MspInit+0x44>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	4a08      	ldr	r2, [pc, #32]	; (8000c1c <HAL_MspInit+0x44>)
 8000bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c00:	6453      	str	r3, [r2, #68]	; 0x44
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_MspInit+0x44>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800

08000c20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a17      	ldr	r2, [pc, #92]	; (8000c9c <HAL_I2C_MspInit+0x7c>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d128      	bne.n	8000c94 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <HAL_I2C_MspInit+0x80>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a16      	ldr	r2, [pc, #88]	; (8000ca0 <HAL_I2C_MspInit+0x80>)
 8000c48:	f043 0302 	orr.w	r3, r3, #2
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <HAL_I2C_MspInit+0x80>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c60:	2312      	movs	r3, #18
 8000c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4619      	mov	r1, r3
 8000c76:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <HAL_I2C_MspInit+0x84>)
 8000c78:	f000 f9e4 	bl	8001044 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <HAL_I2C_MspInit+0x80>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <HAL_I2C_MspInit+0x80>)
 8000c82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c86:	6413      	str	r3, [r2, #64]	; 0x40
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <HAL_I2C_MspInit+0x80>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	; 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40005400 	.word	0x40005400
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020400 	.word	0x40020400

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <HardFault_Handler+0x4>

08000cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <MemManage_Handler+0x4>

08000cc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <BusFault_Handler+0x4>

08000cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <UsageFault_Handler+0x4>

08000cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cfc:	f000 f87a 	bl	8000df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <SystemInit+0x20>)
 8000d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0e:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <SystemInit+0x20>)
 8000d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d2c:	480d      	ldr	r0, [pc, #52]	; (8000d64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d2e:	490e      	ldr	r1, [pc, #56]	; (8000d68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d30:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d34:	e002      	b.n	8000d3c <LoopCopyDataInit>

08000d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3a:	3304      	adds	r3, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d40:	d3f9      	bcc.n	8000d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d42:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d44:	4c0b      	ldr	r4, [pc, #44]	; (8000d74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d48:	e001      	b.n	8000d4e <LoopFillZerobss>

08000d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d4c:	3204      	adds	r2, #4

08000d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d50:	d3fb      	bcc.n	8000d4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d52:	f7ff ffd7 	bl	8000d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d56:	f001 ff55 	bl	8002c04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5a:	f7ff fbd5 	bl	8000508 <main>
  bx  lr    
 8000d5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d60:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d68:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000d6c:	08003fe8 	.word	0x08003fe8
  ldr r2, =_sbss
 8000d70:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000d74:	20000288 	.word	0x20000288

08000d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC_IRQHandler>

08000d7a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d7e:	2003      	movs	r0, #3
 8000d80:	f000 f92c 	bl	8000fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d84:	2000      	movs	r0, #0
 8000d86:	f000 f805 	bl	8000d94 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000d8a:	f7ff ff25 	bl	8000bd8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_InitTick+0x54>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_InitTick+0x58>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 f939 	bl	800102a <HAL_SYSTICK_Config>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00e      	b.n	8000de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d80a      	bhi.n	8000dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f000 f90f 	bl	8000ff2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd4:	4a06      	ldr	r2, [pc, #24]	; (8000df0 <HAL_InitTick+0x5c>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e000      	b.n	8000de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000008 	.word	0x20000008
 8000dec:	20000010 	.word	0x20000010
 8000df0:	2000000c 	.word	0x2000000c

08000df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_IncTick+0x20>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_IncTick+0x24>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <HAL_IncTick+0x24>)
 8000e06:	6013      	str	r3, [r2, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000010 	.word	0x20000010
 8000e18:	20000284 	.word	0x20000284

08000e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <HAL_GetTick+0x14>)
 8000e22:	681b      	ldr	r3, [r3, #0]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000284 	.word	0x20000284

08000e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e3c:	f7ff ffee 	bl	8000e1c <HAL_GetTick>
 8000e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e4c:	d005      	beq.n	8000e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e4e:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <HAL_Delay+0x40>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	461a      	mov	r2, r3
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4413      	add	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e5a:	bf00      	nop
 8000e5c:	f7ff ffde 	bl	8000e1c <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d8f7      	bhi.n	8000e5c <HAL_Delay+0x28>
  {
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000010 	.word	0x20000010

08000e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x40>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e94:	4013      	ands	r3, r2
 8000e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea6:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x40>)
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	60d3      	str	r3, [r2, #12]
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00
 8000ebc:	05fa0000 	.word	0x05fa0000

08000ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	0a1b      	lsrs	r3, r3, #8
 8000eca:	f003 0307 	and.w	r3, r3, #7
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db0a      	blt.n	8000f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	490c      	ldr	r1, [pc, #48]	; (8000f28 <__NVIC_SetPriority+0x4c>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	0112      	lsls	r2, r2, #4
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	440b      	add	r3, r1
 8000f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f04:	e00a      	b.n	8000f1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4908      	ldr	r1, [pc, #32]	; (8000f2c <__NVIC_SetPriority+0x50>)
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	f003 030f 	and.w	r3, r3, #15
 8000f12:	3b04      	subs	r3, #4
 8000f14:	0112      	lsls	r2, r2, #4
 8000f16:	b2d2      	uxtb	r2, r2
 8000f18:	440b      	add	r3, r1
 8000f1a:	761a      	strb	r2, [r3, #24]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000e100 	.word	0xe000e100
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	; 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f1c3 0307 	rsb	r3, r3, #7
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	bf28      	it	cs
 8000f4e:	2304      	movcs	r3, #4
 8000f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3304      	adds	r3, #4
 8000f56:	2b06      	cmp	r3, #6
 8000f58:	d902      	bls.n	8000f60 <NVIC_EncodePriority+0x30>
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3b03      	subs	r3, #3
 8000f5e:	e000      	b.n	8000f62 <NVIC_EncodePriority+0x32>
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	f04f 32ff 	mov.w	r2, #4294967295
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43da      	mvns	r2, r3
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	401a      	ands	r2, r3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f78:	f04f 31ff 	mov.w	r1, #4294967295
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f82:	43d9      	mvns	r1, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	4313      	orrs	r3, r2
         );
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3724      	adds	r7, #36	; 0x24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa8:	d301      	bcc.n	8000fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00f      	b.n	8000fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fae:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <SysTick_Config+0x40>)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb6:	210f      	movs	r1, #15
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f7ff ff8e 	bl	8000edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <SysTick_Config+0x40>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc6:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <SysTick_Config+0x40>)
 8000fc8:	2207      	movs	r2, #7
 8000fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	e000e010 	.word	0xe000e010

08000fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff ff47 	bl	8000e78 <__NVIC_SetPriorityGrouping>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b086      	sub	sp, #24
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
 8000ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001004:	f7ff ff5c 	bl	8000ec0 <__NVIC_GetPriorityGrouping>
 8001008:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	68b9      	ldr	r1, [r7, #8]
 800100e:	6978      	ldr	r0, [r7, #20]
 8001010:	f7ff ff8e 	bl	8000f30 <NVIC_EncodePriority>
 8001014:	4602      	mov	r2, r0
 8001016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff5d 	bl	8000edc <__NVIC_SetPriority>
}
 8001022:	bf00      	nop
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ffb0 	bl	8000f98 <SysTick_Config>
 8001038:	4603      	mov	r3, r0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	; 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
 8001062:	e175      	b.n	8001350 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001064:	2201      	movs	r2, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	429a      	cmp	r2, r3
 800107e:	f040 8164 	bne.w	800134a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d00b      	beq.n	80010a2 <HAL_GPIO_Init+0x5e>
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b02      	cmp	r3, #2
 8001090:	d007      	beq.n	80010a2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001096:	2b11      	cmp	r3, #17
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b12      	cmp	r3, #18
 80010a0:	d130      	bne.n	8001104 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d8:	2201      	movs	r2, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	091b      	lsrs	r3, r3, #4
 80010ee:	f003 0201 	and.w	r2, r3, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2203      	movs	r2, #3
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x100>
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2b12      	cmp	r3, #18
 8001142:	d123      	bne.n	800118c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	08da      	lsrs	r2, r3, #3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3208      	adds	r2, #8
 800114c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	220f      	movs	r2, #15
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	691a      	ldr	r2, [r3, #16]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	08da      	lsrs	r2, r3, #3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3208      	adds	r2, #8
 8001186:	69b9      	ldr	r1, [r7, #24]
 8001188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2203      	movs	r2, #3
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0203 	and.w	r2, r3, #3
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 80be 	beq.w	800134a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	4b65      	ldr	r3, [pc, #404]	; (8001364 <HAL_GPIO_Init+0x320>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	4a64      	ldr	r2, [pc, #400]	; (8001364 <HAL_GPIO_Init+0x320>)
 80011d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d8:	6453      	str	r3, [r2, #68]	; 0x44
 80011da:	4b62      	ldr	r3, [pc, #392]	; (8001364 <HAL_GPIO_Init+0x320>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80011e6:	4a60      	ldr	r2, [pc, #384]	; (8001368 <HAL_GPIO_Init+0x324>)
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	3302      	adds	r3, #2
 80011ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	220f      	movs	r2, #15
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a57      	ldr	r2, [pc, #348]	; (800136c <HAL_GPIO_Init+0x328>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d037      	beq.n	8001282 <HAL_GPIO_Init+0x23e>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a56      	ldr	r2, [pc, #344]	; (8001370 <HAL_GPIO_Init+0x32c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d031      	beq.n	800127e <HAL_GPIO_Init+0x23a>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a55      	ldr	r2, [pc, #340]	; (8001374 <HAL_GPIO_Init+0x330>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d02b      	beq.n	800127a <HAL_GPIO_Init+0x236>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a54      	ldr	r2, [pc, #336]	; (8001378 <HAL_GPIO_Init+0x334>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d025      	beq.n	8001276 <HAL_GPIO_Init+0x232>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a53      	ldr	r2, [pc, #332]	; (800137c <HAL_GPIO_Init+0x338>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d01f      	beq.n	8001272 <HAL_GPIO_Init+0x22e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a52      	ldr	r2, [pc, #328]	; (8001380 <HAL_GPIO_Init+0x33c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d019      	beq.n	800126e <HAL_GPIO_Init+0x22a>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a51      	ldr	r2, [pc, #324]	; (8001384 <HAL_GPIO_Init+0x340>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d013      	beq.n	800126a <HAL_GPIO_Init+0x226>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a50      	ldr	r2, [pc, #320]	; (8001388 <HAL_GPIO_Init+0x344>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d00d      	beq.n	8001266 <HAL_GPIO_Init+0x222>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4f      	ldr	r2, [pc, #316]	; (800138c <HAL_GPIO_Init+0x348>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d007      	beq.n	8001262 <HAL_GPIO_Init+0x21e>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4e      	ldr	r2, [pc, #312]	; (8001390 <HAL_GPIO_Init+0x34c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d101      	bne.n	800125e <HAL_GPIO_Init+0x21a>
 800125a:	2309      	movs	r3, #9
 800125c:	e012      	b.n	8001284 <HAL_GPIO_Init+0x240>
 800125e:	230a      	movs	r3, #10
 8001260:	e010      	b.n	8001284 <HAL_GPIO_Init+0x240>
 8001262:	2308      	movs	r3, #8
 8001264:	e00e      	b.n	8001284 <HAL_GPIO_Init+0x240>
 8001266:	2307      	movs	r3, #7
 8001268:	e00c      	b.n	8001284 <HAL_GPIO_Init+0x240>
 800126a:	2306      	movs	r3, #6
 800126c:	e00a      	b.n	8001284 <HAL_GPIO_Init+0x240>
 800126e:	2305      	movs	r3, #5
 8001270:	e008      	b.n	8001284 <HAL_GPIO_Init+0x240>
 8001272:	2304      	movs	r3, #4
 8001274:	e006      	b.n	8001284 <HAL_GPIO_Init+0x240>
 8001276:	2303      	movs	r3, #3
 8001278:	e004      	b.n	8001284 <HAL_GPIO_Init+0x240>
 800127a:	2302      	movs	r3, #2
 800127c:	e002      	b.n	8001284 <HAL_GPIO_Init+0x240>
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <HAL_GPIO_Init+0x240>
 8001282:	2300      	movs	r3, #0
 8001284:	69fa      	ldr	r2, [r7, #28]
 8001286:	f002 0203 	and.w	r2, r2, #3
 800128a:	0092      	lsls	r2, r2, #2
 800128c:	4093      	lsls	r3, r2
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001294:	4934      	ldr	r1, [pc, #208]	; (8001368 <HAL_GPIO_Init+0x324>)
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	3302      	adds	r3, #2
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a2:	4b3c      	ldr	r3, [pc, #240]	; (8001394 <HAL_GPIO_Init+0x350>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012c6:	4a33      	ldr	r2, [pc, #204]	; (8001394 <HAL_GPIO_Init+0x350>)
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012cc:	4b31      	ldr	r3, [pc, #196]	; (8001394 <HAL_GPIO_Init+0x350>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012f0:	4a28      	ldr	r2, [pc, #160]	; (8001394 <HAL_GPIO_Init+0x350>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012f6:	4b27      	ldr	r3, [pc, #156]	; (8001394 <HAL_GPIO_Init+0x350>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800131a:	4a1e      	ldr	r2, [pc, #120]	; (8001394 <HAL_GPIO_Init+0x350>)
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001320:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <HAL_GPIO_Init+0x350>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001344:	4a13      	ldr	r2, [pc, #76]	; (8001394 <HAL_GPIO_Init+0x350>)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3301      	adds	r3, #1
 800134e:	61fb      	str	r3, [r7, #28]
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	2b0f      	cmp	r3, #15
 8001354:	f67f ae86 	bls.w	8001064 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001358:	bf00      	nop
 800135a:	3724      	adds	r7, #36	; 0x24
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	40023800 	.word	0x40023800
 8001368:	40013800 	.word	0x40013800
 800136c:	40020000 	.word	0x40020000
 8001370:	40020400 	.word	0x40020400
 8001374:	40020800 	.word	0x40020800
 8001378:	40020c00 	.word	0x40020c00
 800137c:	40021000 	.word	0x40021000
 8001380:	40021400 	.word	0x40021400
 8001384:	40021800 	.word	0x40021800
 8001388:	40021c00 	.word	0x40021c00
 800138c:	40022000 	.word	0x40022000
 8001390:	40022400 	.word	0x40022400
 8001394:	40013c00 	.word	0x40013c00

08001398 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e07f      	b.n	80014aa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d106      	bne.n	80013c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff fc2e 	bl	8000c20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2224      	movs	r2, #36	; 0x24
 80013c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 0201 	bic.w	r2, r2, #1
 80013da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d107      	bne.n	8001412 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	e006      	b.n	8001420 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800141e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	2b02      	cmp	r3, #2
 8001426:	d104      	bne.n	8001432 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001430:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6859      	ldr	r1, [r3, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <HAL_I2C_Init+0x11c>)
 800143e:	430b      	orrs	r3, r1
 8001440:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68da      	ldr	r2, [r3, #12]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001450:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	691a      	ldr	r2, [r3, #16]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	ea42 0103 	orr.w	r1, r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	021a      	lsls	r2, r3, #8
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	430a      	orrs	r2, r1
 800146a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69d9      	ldr	r1, [r3, #28]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a1a      	ldr	r2, [r3, #32]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	430a      	orrs	r2, r1
 800147a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f042 0201 	orr.w	r2, r2, #1
 800148a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2220      	movs	r2, #32
 8001496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	02008000 	.word	0x02008000

080014b8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af02      	add	r7, sp, #8
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	4608      	mov	r0, r1
 80014c2:	4611      	mov	r1, r2
 80014c4:	461a      	mov	r2, r3
 80014c6:	4603      	mov	r3, r0
 80014c8:	817b      	strh	r3, [r7, #10]
 80014ca:	460b      	mov	r3, r1
 80014cc:	813b      	strh	r3, [r7, #8]
 80014ce:	4613      	mov	r3, r2
 80014d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b20      	cmp	r3, #32
 80014dc:	f040 80f9 	bne.w	80016d2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80014e0:	6a3b      	ldr	r3, [r7, #32]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d002      	beq.n	80014ec <HAL_I2C_Mem_Write+0x34>
 80014e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d105      	bne.n	80014f8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e0ed      	b.n	80016d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d101      	bne.n	8001506 <HAL_I2C_Mem_Write+0x4e>
 8001502:	2302      	movs	r3, #2
 8001504:	e0e6      	b.n	80016d4 <HAL_I2C_Mem_Write+0x21c>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800150e:	f7ff fc85 	bl	8000e1c <HAL_GetTick>
 8001512:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	2319      	movs	r3, #25
 800151a:	2201      	movs	r2, #1
 800151c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f000 f955 	bl	80017d0 <I2C_WaitOnFlagUntilTimeout>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e0d1      	b.n	80016d4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2221      	movs	r2, #33	; 0x21
 8001534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2240      	movs	r2, #64	; 0x40
 800153c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2200      	movs	r2, #0
 8001544:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6a3a      	ldr	r2, [r7, #32]
 800154a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001550:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001558:	88f8      	ldrh	r0, [r7, #6]
 800155a:	893a      	ldrh	r2, [r7, #8]
 800155c:	8979      	ldrh	r1, [r7, #10]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	4603      	mov	r3, r0
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f000 f8b9 	bl	80016e0 <I2C_RequestMemoryWrite>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d005      	beq.n	8001580 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e0a9      	b.n	80016d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001584:	b29b      	uxth	r3, r3
 8001586:	2bff      	cmp	r3, #255	; 0xff
 8001588:	d90e      	bls.n	80015a8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	22ff      	movs	r2, #255	; 0xff
 800158e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001594:	b2da      	uxtb	r2, r3
 8001596:	8979      	ldrh	r1, [r7, #10]
 8001598:	2300      	movs	r3, #0
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f000 fa37 	bl	8001a14 <I2C_TransferConfig>
 80015a6:	e00f      	b.n	80015c8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	8979      	ldrh	r1, [r7, #10]
 80015ba:	2300      	movs	r3, #0
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f000 fa26 	bl	8001a14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f000 f93f 	bl	8001850 <I2C_WaitOnTXISFlagUntilTimeout>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e07b      	b.n	80016d4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	781a      	ldrb	r2, [r3, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ec:	1c5a      	adds	r2, r3, #1
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	3b01      	subs	r3, #1
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001604:	3b01      	subs	r3, #1
 8001606:	b29a      	uxth	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001610:	b29b      	uxth	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d034      	beq.n	8001680 <HAL_I2C_Mem_Write+0x1c8>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800161a:	2b00      	cmp	r3, #0
 800161c:	d130      	bne.n	8001680 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001624:	2200      	movs	r2, #0
 8001626:	2180      	movs	r1, #128	; 0x80
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f000 f8d1 	bl	80017d0 <I2C_WaitOnFlagUntilTimeout>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e04d      	b.n	80016d4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800163c:	b29b      	uxth	r3, r3
 800163e:	2bff      	cmp	r3, #255	; 0xff
 8001640:	d90e      	bls.n	8001660 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	22ff      	movs	r2, #255	; 0xff
 8001646:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800164c:	b2da      	uxtb	r2, r3
 800164e:	8979      	ldrh	r1, [r7, #10]
 8001650:	2300      	movs	r3, #0
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f000 f9db 	bl	8001a14 <I2C_TransferConfig>
 800165e:	e00f      	b.n	8001680 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001664:	b29a      	uxth	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800166e:	b2da      	uxtb	r2, r3
 8001670:	8979      	ldrh	r1, [r7, #10]
 8001672:	2300      	movs	r3, #0
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f000 f9ca 	bl	8001a14 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001684:	b29b      	uxth	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d19e      	bne.n	80015c8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f000 f91e 	bl	80018d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e01a      	b.n	80016d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2220      	movs	r2, #32
 80016a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6859      	ldr	r1, [r3, #4]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <HAL_I2C_Mem_Write+0x224>)
 80016b2:	400b      	ands	r3, r1
 80016b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2220      	movs	r2, #32
 80016ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	e000      	b.n	80016d4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80016d2:	2302      	movs	r3, #2
  }
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	fe00e800 	.word	0xfe00e800

080016e0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af02      	add	r7, sp, #8
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	4608      	mov	r0, r1
 80016ea:	4611      	mov	r1, r2
 80016ec:	461a      	mov	r2, r3
 80016ee:	4603      	mov	r3, r0
 80016f0:	817b      	strh	r3, [r7, #10]
 80016f2:	460b      	mov	r3, r1
 80016f4:	813b      	strh	r3, [r7, #8]
 80016f6:	4613      	mov	r3, r2
 80016f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80016fa:	88fb      	ldrh	r3, [r7, #6]
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	8979      	ldrh	r1, [r7, #10]
 8001700:	4b20      	ldr	r3, [pc, #128]	; (8001784 <I2C_RequestMemoryWrite+0xa4>)
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f000 f983 	bl	8001a14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	69b9      	ldr	r1, [r7, #24]
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f000 f89c 	bl	8001850 <I2C_WaitOnTXISFlagUntilTimeout>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e02c      	b.n	800177c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d105      	bne.n	8001734 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001728:	893b      	ldrh	r3, [r7, #8]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	629a      	str	r2, [r3, #40]	; 0x28
 8001732:	e015      	b.n	8001760 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001734:	893b      	ldrh	r3, [r7, #8]
 8001736:	0a1b      	lsrs	r3, r3, #8
 8001738:	b29b      	uxth	r3, r3
 800173a:	b2da      	uxtb	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001742:	69fa      	ldr	r2, [r7, #28]
 8001744:	69b9      	ldr	r1, [r7, #24]
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f000 f882 	bl	8001850 <I2C_WaitOnTXISFlagUntilTimeout>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e012      	b.n	800177c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001756:	893b      	ldrh	r3, [r7, #8]
 8001758:	b2da      	uxtb	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	2200      	movs	r2, #0
 8001768:	2180      	movs	r1, #128	; 0x80
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f000 f830 	bl	80017d0 <I2C_WaitOnFlagUntilTimeout>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	80002000 	.word	0x80002000

08001788 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b02      	cmp	r3, #2
 800179c:	d103      	bne.n	80017a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2200      	movs	r2, #0
 80017a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d007      	beq.n	80017c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	699a      	ldr	r2, [r3, #24]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 0201 	orr.w	r2, r2, #1
 80017c2:	619a      	str	r2, [r3, #24]
  }
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	4613      	mov	r3, r2
 80017de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017e0:	e022      	b.n	8001828 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e8:	d01e      	beq.n	8001828 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017ea:	f7ff fb17 	bl	8000e1c <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d302      	bcc.n	8001800 <I2C_WaitOnFlagUntilTimeout+0x30>
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d113      	bne.n	8001828 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001804:	f043 0220 	orr.w	r2, r3, #32
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2220      	movs	r2, #32
 8001810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e00f      	b.n	8001848 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	699a      	ldr	r2, [r3, #24]
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	4013      	ands	r3, r2
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	429a      	cmp	r2, r3
 8001836:	bf0c      	ite	eq
 8001838:	2301      	moveq	r3, #1
 800183a:	2300      	movne	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	461a      	mov	r2, r3
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	429a      	cmp	r2, r3
 8001844:	d0cd      	beq.n	80017e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800185c:	e02c      	b.n	80018b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	68b9      	ldr	r1, [r7, #8]
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f000 f870 	bl	8001948 <I2C_IsAcknowledgeFailed>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e02a      	b.n	80018c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001878:	d01e      	beq.n	80018b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800187a:	f7ff facf 	bl	8000e1c <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	68ba      	ldr	r2, [r7, #8]
 8001886:	429a      	cmp	r2, r3
 8001888:	d302      	bcc.n	8001890 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d113      	bne.n	80018b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001894:	f043 0220 	orr.w	r2, r3, #32
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2220      	movs	r2, #32
 80018a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e007      	b.n	80018c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d1cb      	bne.n	800185e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018dc:	e028      	b.n	8001930 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	68b9      	ldr	r1, [r7, #8]
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f000 f830 	bl	8001948 <I2C_IsAcknowledgeFailed>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e026      	b.n	8001940 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018f2:	f7ff fa93 	bl	8000e1c <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	68ba      	ldr	r2, [r7, #8]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d302      	bcc.n	8001908 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d113      	bne.n	8001930 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190c:	f043 0220 	orr.w	r2, r3, #32
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2220      	movs	r2, #32
 8001918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e007      	b.n	8001940 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	f003 0320 	and.w	r3, r3, #32
 800193a:	2b20      	cmp	r3, #32
 800193c:	d1cf      	bne.n	80018de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	f003 0310 	and.w	r3, r3, #16
 800195e:	2b10      	cmp	r3, #16
 8001960:	d151      	bne.n	8001a06 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001962:	e022      	b.n	80019aa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800196a:	d01e      	beq.n	80019aa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800196c:	f7ff fa56 	bl	8000e1c <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	429a      	cmp	r2, r3
 800197a:	d302      	bcc.n	8001982 <I2C_IsAcknowledgeFailed+0x3a>
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d113      	bne.n	80019aa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001986:	f043 0220 	orr.w	r2, r3, #32
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2220      	movs	r2, #32
 8001992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e02e      	b.n	8001a08 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	f003 0320 	and.w	r3, r3, #32
 80019b4:	2b20      	cmp	r3, #32
 80019b6:	d1d5      	bne.n	8001964 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2210      	movs	r2, #16
 80019be:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2220      	movs	r2, #32
 80019c6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f7ff fedd 	bl	8001788 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6859      	ldr	r1, [r3, #4]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <I2C_IsAcknowledgeFailed+0xc8>)
 80019da:	400b      	ands	r3, r1
 80019dc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	f043 0204 	orr.w	r2, r3, #4
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2220      	movs	r2, #32
 80019ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	fe00e800 	.word	0xfe00e800

08001a14 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	607b      	str	r3, [r7, #4]
 8001a1e:	460b      	mov	r3, r1
 8001a20:	817b      	strh	r3, [r7, #10]
 8001a22:	4613      	mov	r3, r2
 8001a24:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	0d5b      	lsrs	r3, r3, #21
 8001a30:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001a34:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <I2C_TransferConfig+0x58>)
 8001a36:	430b      	orrs	r3, r1
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	ea02 0103 	and.w	r1, r2, r3
 8001a3e:	897b      	ldrh	r3, [r7, #10]
 8001a40:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a44:	7a7b      	ldrb	r3, [r7, #9]
 8001a46:	041b      	lsls	r3, r3, #16
 8001a48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	431a      	orrs	r2, r3
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	431a      	orrs	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001a5e:	bf00      	nop
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	03ff63ff 	.word	0x03ff63ff

08001a70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b20      	cmp	r3, #32
 8001a84:	d138      	bne.n	8001af8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a90:	2302      	movs	r3, #2
 8001a92:	e032      	b.n	8001afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2224      	movs	r2, #36	; 0x24
 8001aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0201 	bic.w	r2, r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ac2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6819      	ldr	r1, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	e000      	b.n	8001afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001af8:	2302      	movs	r3, #2
  }
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b085      	sub	sp, #20
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b20      	cmp	r3, #32
 8001b1a:	d139      	bne.n	8001b90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d101      	bne.n	8001b2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e033      	b.n	8001b92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2224      	movs	r2, #36	; 0x24
 8001b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0201 	bic.w	r2, r2, #1
 8001b48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	021b      	lsls	r3, r3, #8
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0201 	orr.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2220      	movs	r2, #32
 8001b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	e000      	b.n	8001b92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b90:	2302      	movs	r3, #2
  }
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e291      	b.n	80020da <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 8087 	beq.w	8001cd2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bc4:	4b96      	ldr	r3, [pc, #600]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 030c 	and.w	r3, r3, #12
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d00c      	beq.n	8001bea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bd0:	4b93      	ldr	r3, [pc, #588]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 030c 	and.w	r3, r3, #12
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d112      	bne.n	8001c02 <HAL_RCC_OscConfig+0x62>
 8001bdc:	4b90      	ldr	r3, [pc, #576]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001be8:	d10b      	bne.n	8001c02 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bea:	4b8d      	ldr	r3, [pc, #564]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d06c      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x130>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d168      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e26b      	b.n	80020da <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c0a:	d106      	bne.n	8001c1a <HAL_RCC_OscConfig+0x7a>
 8001c0c:	4b84      	ldr	r3, [pc, #528]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a83      	ldr	r2, [pc, #524]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	e02e      	b.n	8001c78 <HAL_RCC_OscConfig+0xd8>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10c      	bne.n	8001c3c <HAL_RCC_OscConfig+0x9c>
 8001c22:	4b7f      	ldr	r3, [pc, #508]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a7e      	ldr	r2, [pc, #504]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	4b7c      	ldr	r3, [pc, #496]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a7b      	ldr	r2, [pc, #492]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001c34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	e01d      	b.n	8001c78 <HAL_RCC_OscConfig+0xd8>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c44:	d10c      	bne.n	8001c60 <HAL_RCC_OscConfig+0xc0>
 8001c46:	4b76      	ldr	r3, [pc, #472]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a75      	ldr	r2, [pc, #468]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	4b73      	ldr	r3, [pc, #460]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a72      	ldr	r2, [pc, #456]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	e00b      	b.n	8001c78 <HAL_RCC_OscConfig+0xd8>
 8001c60:	4b6f      	ldr	r3, [pc, #444]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a6e      	ldr	r2, [pc, #440]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	4b6c      	ldr	r3, [pc, #432]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a6b      	ldr	r2, [pc, #428]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d013      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7ff f8cc 	bl	8000e1c <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c88:	f7ff f8c8 	bl	8000e1c <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	; 0x64
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e21f      	b.n	80020da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9a:	4b61      	ldr	r3, [pc, #388]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0xe8>
 8001ca6:	e014      	b.n	8001cd2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7ff f8b8 	bl	8000e1c <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7ff f8b4 	bl	8000e1c <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	; 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e20b      	b.n	80020da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc2:	4b57      	ldr	r3, [pc, #348]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x110>
 8001cce:	e000      	b.n	8001cd2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d069      	beq.n	8001db2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cde:	4b50      	ldr	r3, [pc, #320]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00b      	beq.n	8001d02 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cea:	4b4d      	ldr	r3, [pc, #308]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 030c 	and.w	r3, r3, #12
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	d11c      	bne.n	8001d30 <HAL_RCC_OscConfig+0x190>
 8001cf6:	4b4a      	ldr	r3, [pc, #296]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d116      	bne.n	8001d30 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d02:	4b47      	ldr	r3, [pc, #284]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d005      	beq.n	8001d1a <HAL_RCC_OscConfig+0x17a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d001      	beq.n	8001d1a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e1df      	b.n	80020da <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1a:	4b41      	ldr	r3, [pc, #260]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	493d      	ldr	r1, [pc, #244]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2e:	e040      	b.n	8001db2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d023      	beq.n	8001d80 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d38:	4b39      	ldr	r3, [pc, #228]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a38      	ldr	r2, [pc, #224]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d44:	f7ff f86a 	bl	8000e1c <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4c:	f7ff f866 	bl	8000e1c <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e1bd      	b.n	80020da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5e:	4b30      	ldr	r3, [pc, #192]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6a:	4b2d      	ldr	r3, [pc, #180]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4929      	ldr	r1, [pc, #164]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	600b      	str	r3, [r1, #0]
 8001d7e:	e018      	b.n	8001db2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d80:	4b27      	ldr	r3, [pc, #156]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a26      	ldr	r2, [pc, #152]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001d86:	f023 0301 	bic.w	r3, r3, #1
 8001d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8c:	f7ff f846 	bl	8000e1c <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d94:	f7ff f842 	bl	8000e1c <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e199      	b.n	80020da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da6:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f0      	bne.n	8001d94 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d038      	beq.n	8001e30 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d019      	beq.n	8001dfa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dc6:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dca:	4a15      	ldr	r2, [pc, #84]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd2:	f7ff f823 	bl	8000e1c <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dda:	f7ff f81f 	bl	8000e1c <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e176      	b.n	80020da <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f0      	beq.n	8001dda <HAL_RCC_OscConfig+0x23a>
 8001df8:	e01a      	b.n	8001e30 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dfe:	4a08      	ldr	r2, [pc, #32]	; (8001e20 <HAL_RCC_OscConfig+0x280>)
 8001e00:	f023 0301 	bic.w	r3, r3, #1
 8001e04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e06:	f7ff f809 	bl	8000e1c <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e0c:	e00a      	b.n	8001e24 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e0e:	f7ff f805 	bl	8000e1c <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d903      	bls.n	8001e24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e15c      	b.n	80020da <HAL_RCC_OscConfig+0x53a>
 8001e20:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e24:	4b91      	ldr	r3, [pc, #580]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1ee      	bne.n	8001e0e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 80a4 	beq.w	8001f86 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e3e:	4b8b      	ldr	r3, [pc, #556]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10d      	bne.n	8001e66 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e4a:	4b88      	ldr	r3, [pc, #544]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	4a87      	ldr	r2, [pc, #540]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e54:	6413      	str	r3, [r2, #64]	; 0x40
 8001e56:	4b85      	ldr	r3, [pc, #532]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e62:	2301      	movs	r3, #1
 8001e64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e66:	4b82      	ldr	r3, [pc, #520]	; (8002070 <HAL_RCC_OscConfig+0x4d0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d118      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001e72:	4b7f      	ldr	r3, [pc, #508]	; (8002070 <HAL_RCC_OscConfig+0x4d0>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a7e      	ldr	r2, [pc, #504]	; (8002070 <HAL_RCC_OscConfig+0x4d0>)
 8001e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e7e:	f7fe ffcd 	bl	8000e1c <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e86:	f7fe ffc9 	bl	8000e1c <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b64      	cmp	r3, #100	; 0x64
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e120      	b.n	80020da <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e98:	4b75      	ldr	r3, [pc, #468]	; (8002070 <HAL_RCC_OscConfig+0x4d0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d106      	bne.n	8001eba <HAL_RCC_OscConfig+0x31a>
 8001eac:	4b6f      	ldr	r3, [pc, #444]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb0:	4a6e      	ldr	r2, [pc, #440]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb8:	e02d      	b.n	8001f16 <HAL_RCC_OscConfig+0x376>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10c      	bne.n	8001edc <HAL_RCC_OscConfig+0x33c>
 8001ec2:	4b6a      	ldr	r3, [pc, #424]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec6:	4a69      	ldr	r2, [pc, #420]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001ec8:	f023 0301 	bic.w	r3, r3, #1
 8001ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ece:	4b67      	ldr	r3, [pc, #412]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed2:	4a66      	ldr	r2, [pc, #408]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001ed4:	f023 0304 	bic.w	r3, r3, #4
 8001ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eda:	e01c      	b.n	8001f16 <HAL_RCC_OscConfig+0x376>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b05      	cmp	r3, #5
 8001ee2:	d10c      	bne.n	8001efe <HAL_RCC_OscConfig+0x35e>
 8001ee4:	4b61      	ldr	r3, [pc, #388]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee8:	4a60      	ldr	r2, [pc, #384]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001eea:	f043 0304 	orr.w	r3, r3, #4
 8001eee:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef0:	4b5e      	ldr	r3, [pc, #376]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef4:	4a5d      	ldr	r2, [pc, #372]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	6713      	str	r3, [r2, #112]	; 0x70
 8001efc:	e00b      	b.n	8001f16 <HAL_RCC_OscConfig+0x376>
 8001efe:	4b5b      	ldr	r3, [pc, #364]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f02:	4a5a      	ldr	r2, [pc, #360]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001f04:	f023 0301 	bic.w	r3, r3, #1
 8001f08:	6713      	str	r3, [r2, #112]	; 0x70
 8001f0a:	4b58      	ldr	r3, [pc, #352]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0e:	4a57      	ldr	r2, [pc, #348]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001f10:	f023 0304 	bic.w	r3, r3, #4
 8001f14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d015      	beq.n	8001f4a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1e:	f7fe ff7d 	bl	8000e1c <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f24:	e00a      	b.n	8001f3c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f26:	f7fe ff79 	bl	8000e1c <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e0ce      	b.n	80020da <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3c:	4b4b      	ldr	r3, [pc, #300]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0ee      	beq.n	8001f26 <HAL_RCC_OscConfig+0x386>
 8001f48:	e014      	b.n	8001f74 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4a:	f7fe ff67 	bl	8000e1c <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f50:	e00a      	b.n	8001f68 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f52:	f7fe ff63 	bl	8000e1c <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e0b8      	b.n	80020da <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f68:	4b40      	ldr	r3, [pc, #256]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1ee      	bne.n	8001f52 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f74:	7dfb      	ldrb	r3, [r7, #23]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d105      	bne.n	8001f86 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f7a:	4b3c      	ldr	r3, [pc, #240]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	4a3b      	ldr	r2, [pc, #236]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 80a4 	beq.w	80020d8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f90:	4b36      	ldr	r3, [pc, #216]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 030c 	and.w	r3, r3, #12
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d06b      	beq.n	8002074 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d149      	bne.n	8002038 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa4:	4b31      	ldr	r3, [pc, #196]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a30      	ldr	r2, [pc, #192]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001faa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7fe ff34 	bl	8000e1c <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7fe ff30 	bl	8000e1c <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e087      	b.n	80020da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fca:	4b28      	ldr	r3, [pc, #160]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69da      	ldr	r2, [r3, #28]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	019b      	lsls	r3, r3, #6
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fec:	085b      	lsrs	r3, r3, #1
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	041b      	lsls	r3, r3, #16
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff8:	061b      	lsls	r3, r3, #24
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	4a1b      	ldr	r2, [pc, #108]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8001ffe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002002:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002004:	4b19      	ldr	r3, [pc, #100]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a18      	ldr	r2, [pc, #96]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 800200a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800200e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7fe ff04 	bl	8000e1c <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002018:	f7fe ff00 	bl	8000e1c <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e057      	b.n	80020da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f0      	beq.n	8002018 <HAL_RCC_OscConfig+0x478>
 8002036:	e04f      	b.n	80020d8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a0b      	ldr	r2, [pc, #44]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 800203e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7fe feea 	bl	8000e1c <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204c:	f7fe fee6 	bl	8000e1c <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e03d      	b.n	80020da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205e:	4b03      	ldr	r3, [pc, #12]	; (800206c <HAL_RCC_OscConfig+0x4cc>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x4ac>
 800206a:	e035      	b.n	80020d8 <HAL_RCC_OscConfig+0x538>
 800206c:	40023800 	.word	0x40023800
 8002070:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002074:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <HAL_RCC_OscConfig+0x544>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d028      	beq.n	80020d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800208c:	429a      	cmp	r2, r3
 800208e:	d121      	bne.n	80020d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800209a:	429a      	cmp	r2, r3
 800209c:	d11a      	bne.n	80020d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020a4:	4013      	ands	r3, r2
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d111      	bne.n	80020d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ba:	085b      	lsrs	r3, r3, #1
 80020bc:	3b01      	subs	r3, #1
 80020be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d107      	bne.n	80020d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40023800 	.word	0x40023800

080020e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0d0      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002100:	4b6a      	ldr	r3, [pc, #424]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 030f 	and.w	r3, r3, #15
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d910      	bls.n	8002130 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210e:	4b67      	ldr	r3, [pc, #412]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 020f 	bic.w	r2, r3, #15
 8002116:	4965      	ldr	r1, [pc, #404]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	4b63      	ldr	r3, [pc, #396]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d001      	beq.n	8002130 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0b8      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d020      	beq.n	800217e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002148:	4b59      	ldr	r3, [pc, #356]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	4a58      	ldr	r2, [pc, #352]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 800214e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002152:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002160:	4b53      	ldr	r3, [pc, #332]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	4a52      	ldr	r2, [pc, #328]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002166:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800216a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800216c:	4b50      	ldr	r3, [pc, #320]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	494d      	ldr	r1, [pc, #308]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 800217a:	4313      	orrs	r3, r2
 800217c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d040      	beq.n	800220c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002192:	4b47      	ldr	r3, [pc, #284]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d115      	bne.n	80021ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e07f      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021aa:	4b41      	ldr	r3, [pc, #260]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d109      	bne.n	80021ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e073      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ba:	4b3d      	ldr	r3, [pc, #244]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e06b      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ca:	4b39      	ldr	r3, [pc, #228]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f023 0203 	bic.w	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4936      	ldr	r1, [pc, #216]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021dc:	f7fe fe1e 	bl	8000e1c <HAL_GetTick>
 80021e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e2:	e00a      	b.n	80021fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e4:	f7fe fe1a 	bl	8000e1c <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e053      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fa:	4b2d      	ldr	r3, [pc, #180]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 020c 	and.w	r2, r3, #12
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	429a      	cmp	r2, r3
 800220a:	d1eb      	bne.n	80021e4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 030f 	and.w	r3, r3, #15
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d210      	bcs.n	800223c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b24      	ldr	r3, [pc, #144]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 020f 	bic.w	r2, r3, #15
 8002222:	4922      	ldr	r1, [pc, #136]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e032      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d008      	beq.n	800225a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002248:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4916      	ldr	r1, [pc, #88]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002256:	4313      	orrs	r3, r2
 8002258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d009      	beq.n	800227a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002266:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	490e      	ldr	r1, [pc, #56]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800227a:	f000 f821 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 800227e:	4601      	mov	r1, r0
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <HAL_RCC_ClockConfig+0x1cc>)
 800228c:	5cd3      	ldrb	r3, [r2, r3]
 800228e:	fa21 f303 	lsr.w	r3, r1, r3
 8002292:	4a09      	ldr	r2, [pc, #36]	; (80022b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_RCC_ClockConfig+0x1d4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe fd7a 	bl	8000d94 <HAL_InitTick>

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40023c00 	.word	0x40023c00
 80022b0:	40023800 	.word	0x40023800
 80022b4:	08003fc8 	.word	0x08003fc8
 80022b8:	20000008 	.word	0x20000008
 80022bc:	2000000c 	.word	0x2000000c

080022c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	607b      	str	r3, [r7, #4]
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	2300      	movs	r3, #0
 80022d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022d6:	4b50      	ldr	r3, [pc, #320]	; (8002418 <HAL_RCC_GetSysClockFreq+0x158>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d007      	beq.n	80022f2 <HAL_RCC_GetSysClockFreq+0x32>
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d008      	beq.n	80022f8 <HAL_RCC_GetSysClockFreq+0x38>
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f040 808d 	bne.w	8002406 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022ec:	4b4b      	ldr	r3, [pc, #300]	; (800241c <HAL_RCC_GetSysClockFreq+0x15c>)
 80022ee:	60bb      	str	r3, [r7, #8]
      break;
 80022f0:	e08c      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022f2:	4b4b      	ldr	r3, [pc, #300]	; (8002420 <HAL_RCC_GetSysClockFreq+0x160>)
 80022f4:	60bb      	str	r3, [r7, #8]
      break;
 80022f6:	e089      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022f8:	4b47      	ldr	r3, [pc, #284]	; (8002418 <HAL_RCC_GetSysClockFreq+0x158>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002300:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002302:	4b45      	ldr	r3, [pc, #276]	; (8002418 <HAL_RCC_GetSysClockFreq+0x158>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d023      	beq.n	8002356 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800230e:	4b42      	ldr	r3, [pc, #264]	; (8002418 <HAL_RCC_GetSysClockFreq+0x158>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	099b      	lsrs	r3, r3, #6
 8002314:	f04f 0400 	mov.w	r4, #0
 8002318:	f240 11ff 	movw	r1, #511	; 0x1ff
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	ea03 0501 	and.w	r5, r3, r1
 8002324:	ea04 0602 	and.w	r6, r4, r2
 8002328:	4a3d      	ldr	r2, [pc, #244]	; (8002420 <HAL_RCC_GetSysClockFreq+0x160>)
 800232a:	fb02 f106 	mul.w	r1, r2, r6
 800232e:	2200      	movs	r2, #0
 8002330:	fb02 f205 	mul.w	r2, r2, r5
 8002334:	440a      	add	r2, r1
 8002336:	493a      	ldr	r1, [pc, #232]	; (8002420 <HAL_RCC_GetSysClockFreq+0x160>)
 8002338:	fba5 0101 	umull	r0, r1, r5, r1
 800233c:	1853      	adds	r3, r2, r1
 800233e:	4619      	mov	r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f04f 0400 	mov.w	r4, #0
 8002346:	461a      	mov	r2, r3
 8002348:	4623      	mov	r3, r4
 800234a:	f7fd ff5d 	bl	8000208 <__aeabi_uldivmod>
 800234e:	4603      	mov	r3, r0
 8002350:	460c      	mov	r4, r1
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	e049      	b.n	80023ea <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002356:	4b30      	ldr	r3, [pc, #192]	; (8002418 <HAL_RCC_GetSysClockFreq+0x158>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	099b      	lsrs	r3, r3, #6
 800235c:	f04f 0400 	mov.w	r4, #0
 8002360:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	ea03 0501 	and.w	r5, r3, r1
 800236c:	ea04 0602 	and.w	r6, r4, r2
 8002370:	4629      	mov	r1, r5
 8002372:	4632      	mov	r2, r6
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	f04f 0400 	mov.w	r4, #0
 800237c:	0154      	lsls	r4, r2, #5
 800237e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002382:	014b      	lsls	r3, r1, #5
 8002384:	4619      	mov	r1, r3
 8002386:	4622      	mov	r2, r4
 8002388:	1b49      	subs	r1, r1, r5
 800238a:	eb62 0206 	sbc.w	r2, r2, r6
 800238e:	f04f 0300 	mov.w	r3, #0
 8002392:	f04f 0400 	mov.w	r4, #0
 8002396:	0194      	lsls	r4, r2, #6
 8002398:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800239c:	018b      	lsls	r3, r1, #6
 800239e:	1a5b      	subs	r3, r3, r1
 80023a0:	eb64 0402 	sbc.w	r4, r4, r2
 80023a4:	f04f 0100 	mov.w	r1, #0
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	00e2      	lsls	r2, r4, #3
 80023ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80023b2:	00d9      	lsls	r1, r3, #3
 80023b4:	460b      	mov	r3, r1
 80023b6:	4614      	mov	r4, r2
 80023b8:	195b      	adds	r3, r3, r5
 80023ba:	eb44 0406 	adc.w	r4, r4, r6
 80023be:	f04f 0100 	mov.w	r1, #0
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	02a2      	lsls	r2, r4, #10
 80023c8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80023cc:	0299      	lsls	r1, r3, #10
 80023ce:	460b      	mov	r3, r1
 80023d0:	4614      	mov	r4, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	4621      	mov	r1, r4
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f04f 0400 	mov.w	r4, #0
 80023dc:	461a      	mov	r2, r3
 80023de:	4623      	mov	r3, r4
 80023e0:	f7fd ff12 	bl	8000208 <__aeabi_uldivmod>
 80023e4:	4603      	mov	r3, r0
 80023e6:	460c      	mov	r4, r1
 80023e8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <HAL_RCC_GetSysClockFreq+0x158>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	0c1b      	lsrs	r3, r3, #16
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	3301      	adds	r3, #1
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002402:	60bb      	str	r3, [r7, #8]
      break;
 8002404:	e002      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002406:	4b05      	ldr	r3, [pc, #20]	; (800241c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002408:	60bb      	str	r3, [r7, #8]
      break;
 800240a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800240c:	68bb      	ldr	r3, [r7, #8]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002416:	bf00      	nop
 8002418:	40023800 	.word	0x40023800
 800241c:	00f42400 	.word	0x00f42400
 8002420:	017d7840 	.word	0x017d7840

08002424 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d012      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800244c:	4b69      	ldr	r3, [pc, #420]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	4a68      	ldr	r2, [pc, #416]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002452:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002456:	6093      	str	r3, [r2, #8]
 8002458:	4b66      	ldr	r3, [pc, #408]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002460:	4964      	ldr	r1, [pc, #400]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800246e:	2301      	movs	r3, #1
 8002470:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d017      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800247e:	4b5d      	ldr	r3, [pc, #372]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002484:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248c:	4959      	ldr	r1, [pc, #356]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800248e:	4313      	orrs	r3, r2
 8002490:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002498:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800249c:	d101      	bne.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800249e:	2301      	movs	r3, #1
 80024a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80024aa:	2301      	movs	r3, #1
 80024ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d017      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024ba:	4b4e      	ldr	r3, [pc, #312]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	494a      	ldr	r1, [pc, #296]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024d8:	d101      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80024da:	2301      	movs	r3, #1
 80024dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80024e6:	2301      	movs	r3, #1
 80024e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80024f6:	2301      	movs	r3, #1
 80024f8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 808b 	beq.w	800261e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002508:	4b3a      	ldr	r3, [pc, #232]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	4a39      	ldr	r2, [pc, #228]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800250e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002512:	6413      	str	r3, [r2, #64]	; 0x40
 8002514:	4b37      	ldr	r3, [pc, #220]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002520:	4b35      	ldr	r3, [pc, #212]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a34      	ldr	r2, [pc, #208]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800252c:	f7fe fc76 	bl	8000e1c <HAL_GetTick>
 8002530:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002534:	f7fe fc72 	bl	8000e1c <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b64      	cmp	r3, #100	; 0x64
 8002540:	d901      	bls.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e357      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002546:	4b2c      	ldr	r3, [pc, #176]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002552:	4b28      	ldr	r3, [pc, #160]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800255a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d035      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	429a      	cmp	r2, r3
 800256e:	d02e      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002570:	4b20      	ldr	r3, [pc, #128]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002578:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800257a:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800257c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257e:	4a1d      	ldr	r2, [pc, #116]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002584:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002586:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258a:	4a1a      	ldr	r2, [pc, #104]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800258c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002590:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002592:	4a18      	ldr	r2, [pc, #96]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002598:	4b16      	ldr	r3, [pc, #88]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800259a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d114      	bne.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7fe fc3a 	bl	8000e1c <HAL_GetTick>
 80025a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025aa:	e00a      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ac:	f7fe fc36 	bl	8000e1c <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e319      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c2:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0ee      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025da:	d111      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025e8:	4b04      	ldr	r3, [pc, #16]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80025ea:	400b      	ands	r3, r1
 80025ec:	4901      	ldr	r1, [pc, #4]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	608b      	str	r3, [r1, #8]
 80025f2:	e00b      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40007000 	.word	0x40007000
 80025fc:	0ffffcff 	.word	0x0ffffcff
 8002600:	4bb1      	ldr	r3, [pc, #708]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	4ab0      	ldr	r2, [pc, #704]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002606:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800260a:	6093      	str	r3, [r2, #8]
 800260c:	4bae      	ldr	r3, [pc, #696]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800260e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002618:	49ab      	ldr	r1, [pc, #684]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800261a:	4313      	orrs	r3, r2
 800261c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	2b00      	cmp	r3, #0
 8002628:	d010      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800262a:	4ba7      	ldr	r3, [pc, #668]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800262c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002630:	4aa5      	ldr	r2, [pc, #660]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002636:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800263a:	4ba3      	ldr	r3, [pc, #652]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800263c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002644:	49a0      	ldr	r1, [pc, #640]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00a      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002658:	4b9b      	ldr	r3, [pc, #620]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800265a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002666:	4998      	ldr	r1, [pc, #608]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800267a:	4b93      	ldr	r3, [pc, #588]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800267c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002680:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002688:	498f      	ldr	r1, [pc, #572]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00a      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800269c:	4b8a      	ldr	r3, [pc, #552]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026aa:	4987      	ldr	r1, [pc, #540]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80026be:	4b82      	ldr	r3, [pc, #520]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026cc:	497e      	ldr	r1, [pc, #504]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00a      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026e0:	4b79      	ldr	r3, [pc, #484]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e6:	f023 0203 	bic.w	r2, r3, #3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	4976      	ldr	r1, [pc, #472]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00a      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002702:	4b71      	ldr	r3, [pc, #452]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002708:	f023 020c 	bic.w	r2, r3, #12
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002710:	496d      	ldr	r1, [pc, #436]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002724:	4b68      	ldr	r3, [pc, #416]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002732:	4965      	ldr	r1, [pc, #404]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002746:	4b60      	ldr	r3, [pc, #384]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002754:	495c      	ldr	r1, [pc, #368]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00a      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002768:	4b57      	ldr	r3, [pc, #348]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800276a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002776:	4954      	ldr	r1, [pc, #336]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00a      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800278a:	4b4f      	ldr	r3, [pc, #316]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800278c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002790:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002798:	494b      	ldr	r1, [pc, #300]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800279a:	4313      	orrs	r3, r2
 800279c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80027ac:	4b46      	ldr	r3, [pc, #280]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ba:	4943      	ldr	r1, [pc, #268]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00a      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80027ce:	4b3e      	ldr	r3, [pc, #248]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80027d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027dc:	493a      	ldr	r1, [pc, #232]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00a      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027f0:	4b35      	ldr	r3, [pc, #212]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80027f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027fe:	4932      	ldr	r1, [pc, #200]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d011      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002812:	4b2d      	ldr	r3, [pc, #180]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002818:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002820:	4929      	ldr	r1, [pc, #164]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800282c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002830:	d101      	bne.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002832:	2301      	movs	r3, #1
 8002834:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002842:	2301      	movs	r3, #1
 8002844:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00a      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002852:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002858:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002860:	4919      	ldr	r1, [pc, #100]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00b      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002874:	4b14      	ldr	r3, [pc, #80]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002884:	4910      	ldr	r1, [pc, #64]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002886:	4313      	orrs	r3, r2
 8002888:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d006      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 80d9 	beq.w	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80028a0:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a08      	ldr	r2, [pc, #32]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ac:	f7fe fab6 	bl	8000e1c <HAL_GetTick>
 80028b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028b2:	e00b      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028b4:	f7fe fab2 	bl	8000e1c <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b64      	cmp	r3, #100	; 0x64
 80028c0:	d904      	bls.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e197      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80028c6:	bf00      	nop
 80028c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028cc:	4b6c      	ldr	r3, [pc, #432]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1ed      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d021      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d11d      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80028ec:	4b64      	ldr	r3, [pc, #400]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028f2:	0c1b      	lsrs	r3, r3, #16
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028fa:	4b61      	ldr	r3, [pc, #388]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002900:	0e1b      	lsrs	r3, r3, #24
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	019a      	lsls	r2, r3, #6
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	041b      	lsls	r3, r3, #16
 8002912:	431a      	orrs	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	061b      	lsls	r3, r3, #24
 8002918:	431a      	orrs	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	071b      	lsls	r3, r3, #28
 8002920:	4957      	ldr	r1, [pc, #348]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d004      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002938:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800293c:	d00a      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002946:	2b00      	cmp	r3, #0
 8002948:	d02e      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002952:	d129      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002954:	4b4a      	ldr	r3, [pc, #296]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800295a:	0c1b      	lsrs	r3, r3, #16
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002962:	4b47      	ldr	r3, [pc, #284]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002968:	0f1b      	lsrs	r3, r3, #28
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	019a      	lsls	r2, r3, #6
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	041b      	lsls	r3, r3, #16
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	061b      	lsls	r3, r3, #24
 8002982:	431a      	orrs	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	071b      	lsls	r3, r3, #28
 8002988:	493d      	ldr	r1, [pc, #244]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800298a:	4313      	orrs	r3, r2
 800298c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002990:	4b3b      	ldr	r3, [pc, #236]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002992:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002996:	f023 021f 	bic.w	r2, r3, #31
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	3b01      	subs	r3, #1
 80029a0:	4937      	ldr	r1, [pc, #220]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d01d      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029b4:	4b32      	ldr	r3, [pc, #200]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ba:	0e1b      	lsrs	r3, r3, #24
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029c2:	4b2f      	ldr	r3, [pc, #188]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029c8:	0f1b      	lsrs	r3, r3, #28
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	019a      	lsls	r2, r3, #6
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	041b      	lsls	r3, r3, #16
 80029dc:	431a      	orrs	r2, r3
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	061b      	lsls	r3, r3, #24
 80029e2:	431a      	orrs	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	071b      	lsls	r3, r3, #28
 80029e8:	4925      	ldr	r1, [pc, #148]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d011      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	019a      	lsls	r2, r3, #6
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	041b      	lsls	r3, r3, #16
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	061b      	lsls	r3, r3, #24
 8002a10:	431a      	orrs	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	071b      	lsls	r3, r3, #28
 8002a18:	4919      	ldr	r1, [pc, #100]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a20:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a16      	ldr	r2, [pc, #88]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a2c:	f7fe f9f6 	bl	8000e1c <HAL_GetTick>
 8002a30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a34:	f7fe f9f2 	bl	8000e1c <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b64      	cmp	r3, #100	; 0x64
 8002a40:	d901      	bls.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e0d7      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a46:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	f040 80cd 	bne.w	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a5a:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a08      	ldr	r2, [pc, #32]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a66:	f7fe f9d9 	bl	8000e1c <HAL_GetTick>
 8002a6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a6c:	e00a      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a6e:	f7fe f9d5 	bl	8000e1c <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b64      	cmp	r3, #100	; 0x64
 8002a7a:	d903      	bls.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e0ba      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002a80:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a84:	4b5e      	ldr	r3, [pc, #376]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a90:	d0ed      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d009      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d02e      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d12a      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002aba:	4b51      	ldr	r3, [pc, #324]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac0:	0c1b      	lsrs	r3, r3, #16
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ac8:	4b4d      	ldr	r3, [pc, #308]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ace:	0f1b      	lsrs	r3, r3, #28
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	019a      	lsls	r2, r3, #6
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	041b      	lsls	r3, r3, #16
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	061b      	lsls	r3, r3, #24
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	071b      	lsls	r3, r3, #28
 8002aee:	4944      	ldr	r1, [pc, #272]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002af6:	4b42      	ldr	r3, [pc, #264]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002afc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b04:	3b01      	subs	r3, #1
 8002b06:	021b      	lsls	r3, r3, #8
 8002b08:	493d      	ldr	r1, [pc, #244]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d022      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b24:	d11d      	bne.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b26:	4b36      	ldr	r3, [pc, #216]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2c:	0e1b      	lsrs	r3, r3, #24
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b34:	4b32      	ldr	r3, [pc, #200]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3a:	0f1b      	lsrs	r3, r3, #28
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	019a      	lsls	r2, r3, #6
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	041b      	lsls	r3, r3, #16
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	061b      	lsls	r3, r3, #24
 8002b54:	431a      	orrs	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	071b      	lsls	r3, r3, #28
 8002b5a:	4929      	ldr	r1, [pc, #164]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d028      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b6e:	4b24      	ldr	r3, [pc, #144]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b74:	0e1b      	lsrs	r3, r3, #24
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b7c:	4b20      	ldr	r3, [pc, #128]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b82:	0c1b      	lsrs	r3, r3, #16
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	019a      	lsls	r2, r3, #6
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	041b      	lsls	r3, r3, #16
 8002b94:	431a      	orrs	r2, r3
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	061b      	lsls	r3, r3, #24
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	071b      	lsls	r3, r3, #28
 8002ba2:	4917      	ldr	r1, [pc, #92]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002baa:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb8:	4911      	ldr	r1, [pc, #68]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002bc0:	4b0f      	ldr	r3, [pc, #60]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a0e      	ldr	r2, [pc, #56]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bcc:	f7fe f926 	bl	8000e1c <HAL_GetTick>
 8002bd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002bd4:	f7fe f922 	bl	8000e1c <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b64      	cmp	r3, #100	; 0x64
 8002be0:	d901      	bls.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e007      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002be6:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bf2:	d1ef      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3720      	adds	r7, #32
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40023800 	.word	0x40023800

08002c04 <__libc_init_array>:
 8002c04:	b570      	push	{r4, r5, r6, lr}
 8002c06:	4e0d      	ldr	r6, [pc, #52]	; (8002c3c <__libc_init_array+0x38>)
 8002c08:	4c0d      	ldr	r4, [pc, #52]	; (8002c40 <__libc_init_array+0x3c>)
 8002c0a:	1ba4      	subs	r4, r4, r6
 8002c0c:	10a4      	asrs	r4, r4, #2
 8002c0e:	2500      	movs	r5, #0
 8002c10:	42a5      	cmp	r5, r4
 8002c12:	d109      	bne.n	8002c28 <__libc_init_array+0x24>
 8002c14:	4e0b      	ldr	r6, [pc, #44]	; (8002c44 <__libc_init_array+0x40>)
 8002c16:	4c0c      	ldr	r4, [pc, #48]	; (8002c48 <__libc_init_array+0x44>)
 8002c18:	f000 f820 	bl	8002c5c <_init>
 8002c1c:	1ba4      	subs	r4, r4, r6
 8002c1e:	10a4      	asrs	r4, r4, #2
 8002c20:	2500      	movs	r5, #0
 8002c22:	42a5      	cmp	r5, r4
 8002c24:	d105      	bne.n	8002c32 <__libc_init_array+0x2e>
 8002c26:	bd70      	pop	{r4, r5, r6, pc}
 8002c28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c2c:	4798      	blx	r3
 8002c2e:	3501      	adds	r5, #1
 8002c30:	e7ee      	b.n	8002c10 <__libc_init_array+0xc>
 8002c32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c36:	4798      	blx	r3
 8002c38:	3501      	adds	r5, #1
 8002c3a:	e7f2      	b.n	8002c22 <__libc_init_array+0x1e>
 8002c3c:	08003fe0 	.word	0x08003fe0
 8002c40:	08003fe0 	.word	0x08003fe0
 8002c44:	08003fe0 	.word	0x08003fe0
 8002c48:	08003fe4 	.word	0x08003fe4

08002c4c <memset>:
 8002c4c:	4402      	add	r2, r0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d100      	bne.n	8002c56 <memset+0xa>
 8002c54:	4770      	bx	lr
 8002c56:	f803 1b01 	strb.w	r1, [r3], #1
 8002c5a:	e7f9      	b.n	8002c50 <memset+0x4>

08002c5c <_init>:
 8002c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c5e:	bf00      	nop
 8002c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c62:	bc08      	pop	{r3}
 8002c64:	469e      	mov	lr, r3
 8002c66:	4770      	bx	lr

08002c68 <_fini>:
 8002c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c6a:	bf00      	nop
 8002c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c6e:	bc08      	pop	{r3}
 8002c70:	469e      	mov	lr, r3
 8002c72:	4770      	bx	lr
